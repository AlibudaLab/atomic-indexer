type CheckIn @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  challengeId: BigInt! # uint256
  checkInData: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Claim @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  challengeId: BigInt! # uint256
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Create @entity(immutable: true) {
  id: Bytes!
  challengeId: BigInt! # uint256
  challenge_verifier: Bytes! # address
  challenge_minimumCheckIns: BigInt! # uint64
  challenge_startTimestamp: BigInt! # uint64
  challenge_joinDueTimestamp: BigInt! # uint64
  challenge_endTimestamp: BigInt! # uint64
  challenge_donateDestination: Bytes! # address
  challenge_checkInJudge: Bytes! # address
  challenge_asset: Bytes! # address
  challenge_donationBPS: BigInt! # uint128
  challenge_stakePerUser: BigInt! # uint128
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DonationOrgSet @entity(immutable: true) {
  id: Bytes!
  donationOrg: Bytes! # address
  status: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EIP712DomainChanged @entity(immutable: true) {
  id: Bytes!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type GovernanceTransferred @entity(immutable: true) {
  id: Bytes!
  newGovernance: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Join @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  challengeId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MinDonationBPSSet @entity(immutable: true) {
  id: Bytes!
  newMinDonationBPS: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Settle @entity(immutable: true) {
  id: Bytes!
  challengeId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Challenge @entity {
  id: Bytes! # uint256
  verifier: Bytes! # address
  minimumCheckIns: BigInt! # uint64
  startTimestamp: BigInt! # uint64
  joinDueTimestamp: BigInt! # uint64
  endTimestamp: BigInt! # uint64
  donateDestination: Bytes! # address
  checkInJudge: Bytes! # address
  asset: Bytes! # address
  donationBPS: BigInt! # uint128
  stakePerUser: BigInt! # uint128
  status: BigInt! # uint8
  joinedUsers: [UserChallenge!] @derivedFrom(field: "challengeId")
  totalUsers: BigInt! # uint256
  totalStake: BigInt! # uint256
  totalCheckIns: BigInt! # uint256
  totalClaims: BigInt! # uint256
  totalSucceedUsers: BigInt! # uint256
  totalFailedUsers: BigInt! # uint256
  totalDonation: BigInt #TODO uint256
}

type User @entity {
  id: Bytes! # address
  challengeHistory: [UserChallenge!] @derivedFrom(field: "user")
  totalJoinedChallenges: BigInt! # uint256
  totalStake: BigInt! # uint256
  totalEarned: BigInt! # uint256
  totalCheckIns: BigInt! # uint256
  claimedChallenges: [BigInt!] # uint256[]
  totalClaimedChallenges: BigInt! # uint256
  createdChallenges: [BigInt!] #TODO uint256[] 
  totalCreatedChallenges: BigInt #TODO uint256
  settledChallenges: [BigInt!] #TODO uint256[]
  totalSettledChallenges: BigInt #TODO uint256
  totalSucceedChallenges: BigInt! # uint256
}

type UserChallenge @entity {
  id: Bytes! # user + challengeId
  user: User! # address
  challengeId: Challenge! # uint256
  checkIns: [UserChallengeCheckInRecord!] @derivedFrom(field: "userChallenge")
  status: Int8! # enum
}

type CheckInRecord @entity {
  id: Bytes! # checkInData
  usedInChallenge: [UserChallengeCheckInRecord!] @derivedFrom(field: "checkInRecord")
}

type UserChallengeCheckInRecord @entity(immutable: true) {
  id: Bytes! # user + challengeId + checkInData
  userChallenge: UserChallenge! # user + challengeId
  checkInRecord: CheckInRecord! # checkInData
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}